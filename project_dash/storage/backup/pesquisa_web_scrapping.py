# -*- coding: utf-8 -*-
"""pesquisa-web_scrapping

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aJe5_JBrsfMi5GzqM16V90BqmJQ32kF8

"""

import pandas as pd
import numpy as np
import random
import snscrape
import snscrape.modules.twitter as sntwitter
from datetime import date, timedelta
import os

# **Adicionando os 0s e 1s (Classificação de comunicação)**"""


def zeros_ones(contaPolitico):
    qtd_zeros = len(contaPolitico)-(len(contaPolitico)//2)
    qtd_ones = len(contaPolitico)//2
    classificacao = np.array([*np.ones(qtd_ones), *np.zeros(qtd_zeros)])
    classificacao = classificacao.astype(int)
    random.shuffle(classificacao)

    return classificacao


"""# **Scrapping - Twitter**"""


def scrapping(date_initial, date_final, names):
    conta = []
    for name in names:
        for i, tweet in enumerate(sntwitter.TwitterSearchScraper(f'from:{name} since:{date_initial} until:{date_final}').get_items()):
            conta.append([tweet.url, tweet.date, tweet.id,
                         tweet.content, tweet.username])
        tweets = pd.DataFrame(
            conta, columns=['URL', 'Datetime', 'Tweet Id', 'Text', 'Username'])

    return tweets


"""# **Coletando os dados e montando a tabela**"""


def coletaDeDados(date_initial, date_final, names):
    dadosScrapping = scrapping(date_initial, date_final, names)

    dadosSemanaisPorcent = pd.DataFrame()
    dadosSemanaisQuant = pd.DataFrame()

    for name in names:
        # Dataset scrapping por político
        contaPolitico = dadosScrapping.loc[(
            dadosScrapping['Username'] == name), :]

        classificacao = zeros_ones(contaPolitico)  # Adicionando 0s e 1s

        contaPolitico['tipo_post'] = classificacao  # Adicionando 0s e 1s
        contaPolitico = contaPolitico.reset_index(drop=True)

        # data_br = date_final.strftime('%d/%m/%Y') #Formatando a data final para pt-BR

        totalPosts = len(contaPolitico)  # Contabilizando o total de posts
        # Contbilizando o total de posts políticos
        totalPostsPoliticos = len(contaPolitico.where(
            contaPolitico['tipo_post'] == 1).dropna())
        # Contabilizando a porcentagem de dados políticos
        porcent_politic = '{:.2f}'.format((totalPostsPoliticos/totalPosts)*100)

        # Montando a tabela com as porcentagens por data(semana)
        porcentagem = np.array([name, porcent_politic])
        # Montando a tabela com as porcentagens por data(semana)
        dadosPorcentagem = pd.DataFrame(
            [porcentagem], columns=['Nome', date_final])
        # Montando a tabela com as porcentagens por data(semana)
        dadosSemanaisPorcent = pd.concat(
            [dadosPorcentagem, dadosSemanaisPorcent])

        # Montando a tabela com a quantidade de posts por data(semana)
        quantidade = np.array([name, totalPosts])
        # Montando a tabela com a quantidade de posts por data(semana)
        dadosQuantidade = pd.DataFrame(
            [quantidade], columns=['Nome', date_final])
        # Montando a tabela com a quantidade de posts por data(semana)
        dadosSemanaisQuant = pd.concat([dadosQuantidade, dadosSemanaisQuant])

        porcentagem = dadosSemanaisPorcent.reset_index(drop=True)
        quantidade = dadosSemanaisQuant.reset_index(drop=True)

    return [porcentagem, quantidade]


"""# **Gerando as tabelas com os dados (Quantidade e Porcentagem)**"""


def geracaoDados(names, date_initial, date_final):
    path = "./dados"
    dir = os.listdir(path)

    dadosP = pd.DataFrame()
    dadosQ = pd.DataFrame()

    if len(dir) == 0:
        # os.mkdir('/content/drive/MyDrive/Nova pesquisa/dadosSemanais')

        dados = coletaDeDados(date_initial, date_final, names)

        dados[0].to_csv('./dados/porcentagemSemanal.csv', index=False)
        dados[1].to_csv('./dados/quantidadeSemanal.csv', index=False)
    else:
        dadosPorcentagem = pd.read_csv(
            './dados/porcentagemSemanal.csv', index_col=0)
        dadosQuantidade = pd.read_csv(
            './dados/quantidadeSemanal.csv', index_col=0)

        dados2 = coletaDeDados(date_initial, date_final, names)

        dadosP2 = pd.concat(
            [dadosPorcentagem, dados2[0].set_index('Nome')], axis=1)
        dadosQ2 = pd.concat(
            [dadosQuantidade, dados2[1].set_index('Nome')], axis=1)

        dadosP2.to_csv('./dados/porcentagemSemanal.csv')
        dadosQ2.to_csv('./dados/quantidadeSemanal.csv')


"""# **Início da coleta de dados**

```
* Criar a pasta: dadosSemanais
```

"""


def main():
    date_final = date.today()
    date_initial = date_final - timedelta(6)

    names = ['jairbolsonaro', 'LulaOficial', 'cirogomes', 'simonetebetbr']
    return geracaoDados(names, date_initial, date_final)


if __name__ == "__main__":
    main()
